/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package image_downloader;

import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 *
 * @author asism
 */
public class ImageDownloaderForm extends javax.swing.JFrame {

    private ExecutorService executorService;
    private DownloadTask downloadTask; // Declare DownloadTask as a class member variable
    private DefaultListModel<String> downloadListModel;
    private Map<String, DownloadTask> downloadTasksMap;

    public ImageDownloaderForm() {
        initComponents();
        executorService = Executors.newFixedThreadPool(5); // Create a thread pool with 5 threads
        downloadListModel = new DefaultListModel<>();
        downloadList.setModel(downloadListModel);
        downloadTasksMap = new HashMap<>();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStartDownload = new javax.swing.JButton();
        txtImageURL = new javax.swing.JTextField();
        btnCancelReset = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnPauseResume = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        lblDownloadConsole = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        downloadList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnStartDownload.setText("Start Download");
        btnStartDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartDownloadActionPerformed(evt);
            }
        });

        txtImageURL.setText("https://images.pexels.com/photos/2456439/pexels-photo-2456439.jpeg");
        txtImageURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImageURLActionPerformed(evt);
            }
        });

        btnCancelReset.setText("Cancel");
        btnCancelReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelResetActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Bodoni Bd BT", 1, 48)); // NOI18N
        lblTitle.setText("Multithreaded Asynchronous Image Downloader");

        btnPauseResume.setText("Pause/Resume");
        btnPauseResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseResumeActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblStatus.setText("Downloads:");

        lblDownloadConsole.setText("-- Download Status");

        downloadList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(downloadList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStartDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPauseResume, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelReset, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDownloadConsole)
                                    .addComponent(lblStatus))
                                .addGap(310, 310, 310)
                                .addComponent(jScrollPane1))
                            .addComponent(txtImageURL, javax.swing.GroupLayout.PREFERRED_SIZE, 1104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120)
                .addComponent(txtImageURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStartDownload)
                    .addComponent(btnCancelReset)
                    .addComponent(btnPauseResume))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addGap(26, 26, 26)
                        .addComponent(lblDownloadConsole)
                        .addGap(18, 18, 18)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnStartDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartDownloadActionPerformed
        String imageUrl = txtImageURL.getText();
    JLabel statusLabel = lblDownloadConsole;

    // Recreate executor service if it has been shutdown
    if (executorService.isShutdown() || executorService.isTerminated()) {
        executorService = Executors.newFixedThreadPool(5);
    }

    // Create a download task and submit it to the thread pool
    downloadTask = new DownloadTask(imageUrl, progressBar, statusLabel); // Initialize downloadTask
    executorService.submit(downloadTask);
    
     // Update the download list model
        downloadListModel.addElement(imageUrl);
        downloadTasksMap.put(imageUrl, downloadTask);
    }//GEN-LAST:event_btnStartDownloadActionPerformed


    private void btnPauseResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseResumeActionPerformed
        // Toggle the isPaused flag in the DownloadTask
        if (downloadTask != null) {
            downloadTask.setPaused(!downloadTask.isPaused());
        }
    }//GEN-LAST:event_btnPauseResumeActionPerformed

    private void btnCancelResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelResetActionPerformed
        // Shutdown the executor service to cancel any ongoing downloads
        executorService.shutdownNow();
        
        lblDownloadConsole.setText("Downloads Cancelled");
        // Reset progress bar
                progressBar.setValue(0);
                
                  // Clear the download list model
        downloadListModel.clear();
        downloadTasksMap.clear();
    }//GEN-LAST:event_btnCancelResetActionPerformed

    private void updateProgressBar() {
    int totalDownloads = downloadListModel.size();
    if (totalDownloads == 0) {
        progressBar.setValue(0);
    } else {
        int completedDownloads = totalDownloads - downloadListModel.size();
        int overallProgress = (completedDownloads * 100) / totalDownloads;
        progressBar.setValue(overallProgress);
    }
}
    
    private void updateDownloadStatus(String imageUrl, String status) {
        int index = downloadListModel.indexOf(imageUrl);
        if (index != -1) {
            downloadListModel.setElementAt(imageUrl + " - " + status, index);
        }
    }

    private void downloadTaskCompleted(String imageUrl) {
        downloadTasksMap.remove(imageUrl);
        
    }
    
    private void txtImageURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImageURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImageURLActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ImageDownloaderForm form = new ImageDownloaderForm();
                form.setVisible(true);
                form.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            }
        });
    }

    @Override
    public void dispose() {
        super.dispose();
        executorService.shutdown();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelReset;
    private javax.swing.JButton btnPauseResume;
    private javax.swing.JButton btnStartDownload;
    private javax.swing.JList<String> downloadList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDownloadConsole;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtImageURL;
    // End of variables declaration//GEN-END:variables
}
